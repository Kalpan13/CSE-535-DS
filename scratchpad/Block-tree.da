#BLOCK-TREE

class VoteInfo:
    def __init__(self, id, round, parent_id, parent_round, exec_state_id):
        """[summary]

        Args:
            id ([type]): Unqiue ID of Block
            round ([type]): Round of Block
            parent_id ([type]): parent block ID
            parent_round ([type]): Round of parent block
            exec_state_id ([type]): Speculated Execution State
        """
        
class LedgerCommitInfo:
    # Speculated new committed state to vote directly on 
    def __init__(self):
        """
        commit_state_id : # Null if no commit, else this vote is aggreagated to QC
                         # Hash of root of Merkle tree that covers the history of ledger
        vote_info_hash : # Hash of Votemsg.vote_info
        """

class VoteMsg:
    def __init__(self):
        """
        vote_info : # A Voteinfo Record
        ledger_commit_info : # Speculated ledger info
        high_commit_qc : # QC to synchronize on committed blocks
        sender <- u :# Added automatically when constricuted
        signature <- signu(ledger_commit_info)

        """

class QC:
    def __init__(self):
        """
        vote_info : # VoteInfo record
        ledge_commit_info : # Speculated ledger info
        signatures : # A quorum of signatures
        author <- : u # The validator that produced qc
        author_signature <- : signu(signatures)
        """

class Block:
    def __init__(self):
        """
        author : # The author of the blocl=k, may not be th same as qc.author after view change
        round : # The round that generated this proposal 
        payload : # Proposed transaction
        qc : # QC of parent block
        id : # A unique digest of author, round,payload, qc,vote_info and qc.signatures
        """